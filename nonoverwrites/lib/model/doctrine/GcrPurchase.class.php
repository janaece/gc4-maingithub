<?php

/**
 * Purchase
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    globalclassroom
 * @subpackage model
 * @author     Ron Stewart
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class GcrPurchase extends BaseGcrPurchase
{
    public function cleanDelete()
    {
        $this->amount = 0;
        $this->save();
        $this->updateRelatedAccounting();
        $this->delete();
    }
    public function getDescription()
    {
        if ($this->isCourse())
        {
            $eschool = $this->getPurchaseTypeApp();
            if ($eschool)
            {
                $course = $eschool->selectFromMdlTable('course', 'id', $this->purchase_type_id, true);
                if ($course)
                {
                    return $course->fullname;
                }
            }
        }
        return $this->purchase_type_description;
    }
    public function getHyperlinkToPurchaseType()
    {
        $destination_url = '';
        $app = $this->getPurchaseTypeApp();
        if ($app)
        {
            $destination_url = $app->getAppUrl();
            if ($this->isCourse())
            {
                $destination_url .= '/course/view.php?id=' . $this->purchase_type_id;
            }
        }
        return $destination_url;
    }
    public function getPurchaseTypeApp()
    {
        return GcrInstitutionTable::getApp($this->purchase_type_eschool_id);
    }
    public function getPurchaseTypeObject()
    {
        $product = false;
        $app = $this->getPurchaseTypeApp();
        if ($app)
        {
            if ($this->isCourse())
            {
                $product = $app->selectFromMdlTable('course', 'id', $this->purchase_type_id, true);
            }
            else
            {
                $product = $app;
            }
        }
        return $product;
    }
    public function getPurchaseDescription()
    {
        if (!$product = $this->getPurchaseTypeObject())
        {
            return 'Miscellaneous';
        }
        if ($this->isCourse())
        {
            return $product->fullname . ' (' . $product->shortname . ')';
        }
        else if ($this->isEschool())
        {
            return 'Activation of eSchool: ' . $product->getFullName() . ' (' . $product->getShortName() . ')';
        }
        else if ($this->isClassroom())
        {
            return 'eClassroom on eSchool: ' . $product->getFullName() . ' (' . $product->getShortName() . ')';
        }
        else if ($this->isPayoff())
        {
            return 'Account Withdrawal on: ' . $product->getFullName() . ' (' . $product->getShortName() . ')';
        }
        else if ($this->isMembership())
        {
            return 'Membership on eSchool: ' . $product->getFullName() . ' (' . $product->getShortName() . ')';
        }
        else if ($this->isSubscription())
        {
            return 'Subscription on: ' . $product->getFullName() . ' (' . $product->getShortName() . ')';
        }		
        else if ($this->isSale())
        {
            if ($purchase_item = Doctrine::getTable('GcrPurchaseItem')->find($this->purchase_type_id))
            {
                return $purchase_item->getDescription();
            }
        }
    }
    public function getPurchaseString()
    {
        switch ($this->purchase_type)
        {
            case 'course':
                    return 'Course';
            case 'subscription':
                    return 'Subscription';					
            case 'classroom':
                    return 'eClassroom';
            case 'eschool':
                    return 'eSchool';
            case 'membership':
                    return 'Membership';
            case 'course_manual':
                    return 'Manual Course';
            case 'classroom_manual':
                    return 'Manual eClassroom';
            case 'eschool_manual':
                    return 'Manual eSchool';
            case 'membership_manual':
                    return 'Manual Membership';
            case 'payoff':
                    return 'Account Withdrawal';
            case 'sale':
                    return 'Sale';
            case 'sale_manual':
                    return 'Manual Sale';
        }
        return 'Miscellaneous';
    }
    public function getPurchaserUser()
    {
        if ($institution = $this->getPurchaserInstitution())
        {
            return $institution->getUserById($this->user_id);
        }
        return false;
    }
    public function getPurchaserInstitution()
    {
        return Doctrine::getTable('GcrInstitution')->findOneByShortName($this->user_institution_id);
    }

    public function getPaypalTransactions($status = 'Completed', $start_ts = 0, $end_ts = null)
    {
        if (!$end_ts)
        {
            $end_ts = time();
        }
        $paypal_records = Doctrine::getTable('GcrPaypal')->createQuery('p')
            ->where('p.recurring_payment_id = ? OR p.txn_id = ?', array($this->profile_id, $this->profile_id))
            ->andWhere('p.payment_date >= ?', $start_ts)
            ->andWhere('p.payment_date <= ?', $end_ts)
            ->andWhere('p.payment_status = ?', $status)
            ->orderBy('p.payment_date')
            ->execute();
        return $paypal_records;
    }
    public function assignSeller()
    {
        $app = $this->getPurchaseTypeApp();
        $this->seller_id = 0;
        $this->seller_institution_id = $app->getInstitution()->getShortName();
        if ($this->isCourse())
        {
            if ($course = $app->getCourse($this->purchase_type_id))
            {
                if ($mhr_user = $course->getSeller())
                {
                    $this->seller_id = $mhr_user->getObject()->id;
                    $this->seller_institution_id = $mhr_user->getApp()->getShortName();
                    $this->save();
                }
            }
        }
        else if ($this->isEschool())
        {
            $this->seller_institution_id = GcrInstitutionTable::getHome()->getShortName();
        }
        $this->save();
    }
    public function emailInfoToGC($params = array())
    {
        $app = $this->getPurchaseTypeApp();
        $user_institution = $this->getPurchaserInstitution();
        $mhr_user = $this->getPurchaserUser();
        $mhr_user_obj = $mhr_user->getObject();
        
        $params['eschool'] = $app;
        $params['user_eschool'] = $user_institution;
        $params['time'] = "Time " . date("D: m/d/Y H:i");
        $params['user_info'] = "$mhr_user_obj->username: $mhr_user_obj->firstname $mhr_user_obj->lastname ($mhr_user_obj->email) @ {$user_institution->getFullName()} ({$user_institution->getShortName()})";
        $params['eschool_info']	= "{$app->getFullName()} ({$app->getShortName()})";
        $params['sales_info'] = "Total: " . GcrPurchaseTable::gc_format_money($this->amount);
        $params['purchase_id'] = $this->id;

        $to = gcr::gcPurchaseNotification;
        $subject = "Purchase ID# " . $this->id;
        $from = "paypalnotification@globalclassroom.us"; //set the headers
        $replyto = "noreply@globalclassroom.us";
        $email = new GcrEmailer('purchase_info', $to, $subject, $params, $from, $replyto);
        $email->sendHtmlEmail();
    }
    public function getSellerUser()
    {
        if ($institution = $this->getSellerInstitution())
        {
            if ($this->seller_id > 0)
            {
                if ($mhr_user = $institution->selectFromMhrTable('usr', 'id', $this->seller_id, true))
                {
                    return new GcrMhrUser($mhr_user, $institution);
                }
            }
            else if ($this->seller_id == 0)
            {
                return $institution->getOwnerUser();
            }
        }
        return false;
    }
    public function getSellerInstitution()
    {
        return Doctrine::getTable('GcrInstitution')->findOneByShortName($this->seller_institution_id);
    }
    public function isEclassroomCourse()
    {
        if ($this->seller_id > 0 && $this->isCourse())
        {
            return true;
        }
        return false;
    }
    public function isCourse()
    {
        return ($this->purchase_type == 'course' || $this->purchase_type == 'course_manual');
    }
    public function isEschool()
    {
        return ($this->purchase_type == 'eschool' || $this->purchase_type == 'eschool_manual');
    }
    public function isManual()
    {
        return ($this->purchase_type == 'eschool_manual' || $this->purchase_type == 'course_manual' ||
                $this->purchase_type == 'classroom_manual' || $this->purchase_type == 'membership_manual');
    }
    public function isMembership()
    {
        return ($this->purchase_type == 'membership_manual' || $this->purchase_type == 'membership');
    }
    public function isPayoff()
    {
        return ($this->purchase_type == 'payoff');
    }
    public function isClassroom()
    {
        return ($this->purchase_type == 'classroom' || $this->purchase_type == 'classroom_manual');
    }
    public function isSubscription()
    {
        return ($this->purchase_type == 'subscription');
    }	
    public function isSale()
    {
        return ($this->purchase_type == 'sale' || $this->purchase_type == 'sale_manual');
    }
    public function isPurchaser($user)
    {
        if ($purchaser = $this->getPurchaserUser())
        {
            if ($purchaser->isSameUser($user))
            {
                return true;
            }
        }
        return false;
    }

    public function isRecurring()
    {
        return ($this->purchase_type == 'eschool' || 
                $this->purchase_type == 'classroom' ||
                $this->purchase_type == 'subscription' ||
                $this->purchase_type == 'membership');
    }
    // Is the product being sold to a user on a different platform?
    public function isRemote()
    {
        $purchase_type_app = $this->getPurchaseTypeApp();
        if ($purchase_type_app)
        {
            $purchase_type_institution = $purchase_type_app->getInstitution();
            return ($purchase_type_institution->getShortName() != $this->user_institution_id);
        }
        return false;
    }
    public function isPending()
    {
        return ($this->profile_id == GcrPaypalTable::TXN_PENDING);
    }
    public function purchaseTypeExists()
    {
        if (!$app = $this->getPurchaseTypeApp())
        {
            return false;
        }

        if ($this->isCourse())
        {
            if ($course = $app->getCourse($this->purchase_type_id))
            {
                return true;
            }
            return false;
        }
        else if ($this->isSale())
        {
            return false;
        }
        return true;
    }
    public function updateRelatedAccounting()
    {
        if (!$this->isEschool()) // currently, eschool payments don't affect accounting
        {
            $app = $this->getPurchaseTypeApp();
            if ($app)
            {
                $institution = $app->getInstitution();
                $institution->getAccountManager()->updateAccounting();
                $purchaser = $this->getPurchaserUser();
                if ($this->isEClassroomCourse())
                {
                    $seller = $this->getSellerUser();
                    if ($seller)
                    {
                        $seller->getAccountManager()->updateAccounting();
                    }
                }
                if ($this->isRemote() && $this->commission_fee > 0)
                {
                    $purchaser->getApp()->getAccountManager()->updateAccounting();
                }
                if ($purchaser->getRoleManager()->hasRole('EclassroomUser'))
                {
                    $purchaser->getAccountManager()->updateAccounting();
                }
            }
        }
    }
}
