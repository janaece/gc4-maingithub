<?php

/**
 * GcrUserStorageS3Table
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class GcrUserStorageS3Table extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object GcrUserStorageS3Table
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('GcrUserStorageS3');
    }
    
    public static function getAccount($app)
    {
        $user_storage_s3 = Doctrine::getTable('GcrUserStorageS3')->
                findOneByAppId($app->getInstitution()->getShortName());
        if ($user_storage_s3)
        {
            $account = $user_storage_s3->getAccount();  
        }
        else
        {
            $account = self::getAccountForNewBucket($app);
        }
        return $account;
    }
    public static function getAccountForNewBucket()
    {
        $my_account = false;
        $accounts = Doctrine::getTable('GcrUserStorageS3Account')->findAll();
        foreach ($accounts as $account)
        {
            $records = Doctrine::getTable('GcrUserStorageS3')->findBy('account_id', $account->getId());
            if (count($records) <= 95) // Amazon sets a 100 bucket limit per account
            {
                $my_account = $account;
                break;
            }
        }
        if (!$my_account)
        {
            global $CFG;
            $CFG->current_app->gcError('Cannot create Amazon s3 bucket, all accounts full', 'gcdatabaseerror');
        }
        return $my_account;
    }
    public static function parseS3Url($filename)
    {
        global $CFG;
        
        if (strpos($filename, $CFG->current_app->getUrl() . '/institution/getUserStorageFile') !== false)
        {
            $s3_url_start = strpos($filename, GcrUserStorageAccessS3::FILE_GET_PARAMETER) + 
                    strlen(GcrUserStorageAccessS3::FILE_GET_PARAMETER) + 1;
            if ($s3_url_start)
            {
                $s3_url_end = strpos($filename, '&', $s3_url_start);
                if ($s3_url_end)
                {
                    $s3_url = substr($filename, $s3_url_start, ($s3_url_end - $s3_url_start));
                    return $CFG->current_app->getUrl() . '/' . $s3_url;
                }
            }
        }
        return false;
    }
    public static function deleteBucket($app)
    {
        $user_storage_s3 = Doctrine::getTable('GcrUserStorageS3')->findOneByAppId($app->getShortName());
        if ($user_storage_s3)
        {
            $account = GcrUserStorageS3Table::getAccount($app);
            define('AWS_KEY', $account->getAccessKeyId());
            define('AWS_SECRET_KEY', $account->getSecretAccessKey());
            gcr::loadSdk('aws');
            $api = new AmazonS3();
            $api->delete_bucket($user_storage_s3->getBucketName(), true);
            $user_storage_s3->delete();
        }
    }
}