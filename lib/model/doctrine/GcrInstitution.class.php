<?php

/**
 * Institution
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    globalclassroom
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class GcrInstitution extends BaseGcrInstitution
{
    public function activate()
    {
        $trials = Doctrine::getTable('GcrTrial')->findByOrganizationId($this->id);
        foreach ($trials as $trial)
        {
            $trial->end();
        }
    }
    public function beginTransaction()
    {
        GcrDatabaseAccessPostgres::beginTransaction();
    }
    // This function copies the way the Mahara internal auth plugin salts and
    // encrypts passwords. If Mahara should change their method, this function
    // will need to be updated.
    public function buildUserCredentials($username, $password)
    {
        $bcrypt_cost = $this->getBcryptCost();
        $credentials = new StdClass();
        $credentials->username = $username;
        $credentials->salt = substr(md5(rand(1000000, 9999999)), 2, 8);
        $credentials->password = crypt($password, '$2a$' . $bcrypt_cost . '$' . substr(md5($this->password_salt . $credentials->salt), 0, 22));
        $credentials->password = substr($credentials->password, 0, 7) . substr($credentials->password, 7+22);
        return $credentials;
    }
    public function commitTransaction()
    {
        GcrDatabaseAccessPostgres::commitTransaction();
    }
    public function rollbackTransaction()
    {
        GcrDatabaseAccessPostgres::rollbackTransaction();
    }
    public function countMhrTableRecords($tableName)
    {
        return GcrDatabaseAccessPostgres::countTableRecords($this, $tableName);
    }
    public function create($owner_credentials_array)
    {
        // Create random salt and admin password
        $this->admin_password = GcrEschoolTable::generateAdminPassword();
        $this->password_salt = GcrEschoolTable::generateRandomString();
        
        // Create the new database schema for this institution
        GcrDatabaseAccessPostgres::createSchema($this);   

        // Setup gc4admin
        $gc4_credentials = $this->buildUserCredentials('gc4' . $this->short_name .
                'admin', $this->admin_password);
        $this->updateMhrTable('usr', array('password' => $gc4_credentials->password,
                'salt' => $gc4_credentials->salt), array('username' => 'gc4' . $this->short_name . 'admin'));

        $institution = $this->getAppType()->getTemplateObject();
        
        // add the template's salt to the list of historical salts for the new institution
        $salt_history = new GcrInstitutionSaltHistory();
        $salt_history->setInstitutionid($this->id);
        $salt_history->setSalt($institution->password_salt);
        $salt_history->save();

        // transfer all old salts from template to new institution
        $old_salts = Doctrine::getTable('GcrInstitutionSaltHistory')->findByInstitutionid($institution->id);
        if ($old_salts)
        {
            foreach($old_salts as $salt_record)
            {
                $salt_history = new GcrInstitutionSaltHistory();
                $salt_history->setInstitutionid($this->id);
                $salt_history->setSalt($salt_record->salt);
                $salt_history->save();
            }
        }
        
        // Setup Owner
        $master_admin = $this->getPersonObject();
        $template_owner = $institution->getOwnerUser();
        $owner_credentials = $this->buildUserCredentials($owner_credentials_array['username'], 
                $owner_credentials_array['password']);
        $params = array('username' => $owner_credentials->username,
                        'password' => $owner_credentials->password,
                        'salt' => $owner_credentials->salt,
                        'firstname' => $master_admin->getFirstName(),
                        'lastname' => $master_admin->getLastName(),
                        'email' => $master_admin->getEmail());
        $owner_obj = $template_owner->getObject();
        $this->updateMhrTable('usr', $params, array('id' => $owner_obj->id));
        $this->updateMhrTable('artefact', array('title' => $master_admin->getEmail()),
                array('owner' => $owner_obj->id, 'artefacttype' => 'email'));
        $this->updateMhrTable('artefact', array('title' => $master_admin->getFirstName()),
                array('owner' => $owner_obj->id, 'artefacttype' => 'firstname'));
        $this->updateMhrTable('artefact', array('title' => $master_admin->getLastName()),
                array('owner' => $owner_obj->id, 'artefacttype' => 'lastname'));
        $this->updateMhrTable('artefact', array('title' => $master_admin->getFirstName() .
                ' ' . $master_admin->getLastName()), array('owner' => $owner_obj->id, 'artefacttype' => 'blog'));
        $this->updateMhrTable('artefact_internal_profile_email', array('email' => $master_admin->getEmail()),
                array('owner' => $owner_obj->id, 'principal' => 1));
        $this->creator_id = $template_owner->getObject()->id;
        $this->save();
        
        

        // Set the sitename and mhr_institution display name
        $this->setConfigVar('sitename', $this->full_name);
        $this->updateMhrTable('institution', array('displayname' => $this->full_name),
                array('name' => gcr::maharaInstitutionName));
        // Inherit all commission arrangements with catalogs attached to the template
        $this->copyCommissions($institution);
        
        // Create the default eSchool if it doesn't exist. If an existing eSchool was chosen,
        // create the mnet connections on both sides.
        $eschool = $this->getDefaultEschool(true);
        if ($eschool)
        {
            $this->setMnetConnection($eschool);
            $eschool->setMnetConnection($this);
        }
        else
        {
            $this->createDefaultEschool();
        }
    }
    public function createEclassroom($mhr_user, $eschool)
    {
        $is_institution_classroom = $this->getConfigVar('gc_eclassroom_create_institution');
        $mhr_user_obj = $mhr_user->getObject();
        if ($is_institution_classroom == 'on')
        {
            $params = array('displayname' => $mhr_user->getFullNameString(),
                            'registerallowed' => 0);
            if ($max_users = $this->getConfigVar('gc_eclassroom_max_users'))
            {
                $params['maxuseraccounts'] = $max_users;
            }
            $mhr_institution = $this->generateNewMhrInstitution($params);
            // set purchaser as institution admin on the new mhr_institution
            $params = array('usr' => $mhr_user_obj->id,
                            'institution' => $mhr_institution->name,
                            'ctime' => GcrInstitutionTable::getDbFormatTimestamp(time()),
                            'admin' => 1);
            $mhr_usr_institution = $this->insertIntoMhrTable('usr_institution', $params);
            $params = array('instancename' => $mhr_institution->displayname,
                            'institution' => $mhr_institution->name,
                            'authname' => 'internal');
            $mhr_auth_instance = $this->insertIntoMhrTable('auth_instance', $params);
        }
        // create new eclassroom
        $eclassroom = new GcrEclassroom();
        $eclassroom->setEschoolId($eschool->getShortName());
        $eclassroom->setUserId($mhr_user_obj->id);
        $eclassroom->setUserInstitutionId($this->short_name);
        if ($is_institution_classroom == 'on')
        {
            $eclassroom->setMhrInstitutionName($mhr_institution->name);
        }
        $eclassroom->save();
        return $eclassroom;
    }
    protected function createDefaultEschool()
    {
        $eschool = new GcrEschool();
        $eschool->setShortName($this->default_eschool_id);
        $eschool->setFullName($this->full_name);

        // Create new address and person objects for the eschool
        // but set the values equal to the institution
        $address = $this->getAddressObject()->copy(false);
        $address->save();
        $eschool->setAddress($address->getId());
        $person = $this->getPersonObject()->copy(false);
        $person->save();
        $eschool->setContact1($person->getId());
        $person2 = $this->getPerson2Object()->copy(false);
        $person2->save();
        $eschool->setContact2($person2->getId());

        // A copy of the logo image file will be made in GcrDatabaseAccessPostgres::createSchema
        // when the eschool schema is created.
        $eschool->setLogo($this->logo);
        $institution_type = $this->getAppType();
        $eschool->setEschoolType($institution_type->getEschoolTypeId());
        $eschool->setPasswordSalt(GcrEschoolTable::generateRandomString());
        $eschool->setAdminPassword(GcrEschoolTable::generateAdminPassword());
        $eschool->setEschoolCreator($this->id);
        $eschool->setCreationDate(time());
        $eschool->setOrganizationId($this->id);
        $eschool->save();
        $eschool->create();
    }
    public function createMnetConnection($eschool)
    {
        // we need this check to avoid duplicate mnet connections
        foreach ($this->getMnetEschools() as $mnet_eschool)
        {
            if ($eschool->getShortName() == $mnet_eschool->getShortName())
            {
                return false;
            }
        }
        $mdl_mnet_host = $eschool->getSelfMdlMnetHostRecord();
        $temp_name = GcrEschoolTable::generateRandomString(50);
        $params = array('id' => gcr::autoNumber,
                        'instancename' => $temp_name,
                        'priority' => 1,
                        'institution' => gcr::maharaInstitutionName,
                        'authname' =>'xmlrpc');
        $this->insertIntoMhrTable('auth_instance', $params);
        $mhr_auth_instance = $this->selectFromMhrTable('auth_instance', 'instancename', $temp_name, true);
        $this->insertIntoMhrTable('auth_instance_config', array('instance' => $mhr_auth_instance->id,
                                    'field' => 'theyautocreateusers',
                                    'value' => 1));
        $this->insertIntoMhrTable('auth_instance_config', array('instance' => $mhr_auth_instance->id,
                                    'field' => 'wessoout',
                                    'value' => 1));
        $this->insertIntoMhrTable('auth_instance_config', array('instance' => $mhr_auth_instance->id,
                                    'field' => 'wwwroot',
                                    'value' => $mdl_mnet_host->wwwroot));
        $params = array('wwwroot' => $mdl_mnet_host->wwwroot,
                        'name' => $eschool->getFullName(),
                        'institution' => gcr::maharaInstitutionName,
                        'ipaddress' => $mdl_mnet_host->ip_address,
                        'portno' => 443,
                        'publickey' => $mdl_mnet_host->public_key,
                        'publickeyexpires' => $mdl_mnet_host->public_key_expires,
                        'appname' => 'moodle');
        $this->insertIntoMhrTable('host', $params);
        $this->updateMhrTable('auth_instance', array('instancename' => $eschool->getFullName()), array('instancename' => $temp_name));
    }
    public function createNewTrial($start_date = null)
    {
        if (!$start_date)
        {
                $start_date = time();
        }
        $trialObject = new GcrTrial();
        $trialObject->setOrganizationId($this->id);
        $trialObject->setStartDate($start_date);
        // try to add this trial record to the trial table
        $trialObject->save();
    }
    public function createWantsUrl($redirect_type, $url = false)
    {
        return GcrWantsUrlTable::createWantsUrl($redirect_type, $this, $url);
    }
    public function createUser($mhr_user_obj_array)
    {
        $new_mhr_user_obj = $this->selectFromMhrTable('usr', 'email', $mhr_user_obj_array['email'], true);
        if (!$new_mhr_user_obj)
        {
            $new_mhr_user_obj = $this->insertIntoMhrTable('usr', $mhr_user_obj_array);

            $artefact_email = $this->insertIntoMhrTable('artefact', array(
                'artefacttype' => 'email',
                'container' => 0,
                'owner' => $new_mhr_user_obj->id,
                'ctime' => date('Y-m-d h:i:s'),
                'mtime' => date('Y-m-d h:i:s'),
                'atime' => date('Y-m-d h:i:s'),
                'locked' => 0,
                'title' => $new_mhr_user_obj->email,
                'author' => $new_mhr_user_obj->id,
                'allowcomments' => 0,
                'approvecomments' => 0,
            ));

            $artefact_firstname = $this->insertIntoMhrTable('artefact', array(
                'artefacttype' => 'firstname',
                'container' => 0,
                'owner' => $new_mhr_user_obj->id,
                'ctime' => date('Y-m-d h:i:s'),
                'mtime' => date('Y-m-d h:i:s'),
                'atime' => date('Y-m-d h:i:s'),
                'locked' => 0,
                'title' => $new_mhr_user_obj->firstname,
                'author' => $new_mhr_user_obj->id,
                'allowcomments' => 0,
                'approvecomments' => 0,
            ));

            $artefact_lastname = $this->insertIntoMhrTable('artefact', array(
                'artefacttype' => 'lastname',
                'container' => 0,
                'owner' => $new_mhr_user_obj->id,
                'ctime' => date('Y-m-d h:i:s'),
                'mtime' => date('Y-m-d h:i:s'),
                'atime' => date('Y-m-d h:i:s'),
                'locked' => 0,
                'title' => $new_mhr_user_obj->lastname,
                'author' => $new_mhr_user_obj->id,
                'allowcomments' => 0,
                'approvecomments' => 0,
            ));

            $artefact_lastname = $this->insertIntoMhrTable('artefact', array(
                'artefacttype' => 'blog',
                'container' => 1,
                'owner' => $new_mhr_user_obj->id,
                'ctime' => date('Y-m-d h:i:s'),
                'mtime' => date('Y-m-d h:i:s'),
                'atime' => date('Y-m-d h:i:s'),
                'locked' => 0,
                'title' => $new_mhr_user_obj->firstname . $new_mhr_user_obj->lastname,
                'author' => $new_mhr_user_obj->id,
                'allowcomments' => 0,
                'approvecomments' => 0,
            ));

            $this->insertIntoMhrTable('artefact_internal_profile_email', array(
                'owner' => $new_mhr_user_obj->id,
                'email' => $new_mhr_user_obj->email,
                'verified' => 1,
                'principal' => 1,
                'artefact' => $artefact_email->id,
            ));
            return new GcrMhrUser($new_mhr_user_obj, $this);
        }
        return false;
    }
    public function copyCommissions($institution, $eschool = false)
    {
        if ($eschool && $this->hasMnetConnection($eschool))
        {
            $eschools = array($eschool);
        }
        else
        {
            $eschools = $this->getMnetEschools();
        }
        if (count($eschools > 0))
        {
            foreach ($eschools as $eschool)
            {
                $commission = GcrCommissionTable::getCommission($institution, $eschool);
                if ($commission)
                {
                    GcrCommissionTable::createCommission($this, $eschool, $commission->getCommissionRate());
                }
            }
        }
    }
    public function deleteFromMhrTable($tableName, $columnName, $columnValue)
    {
        GcrDatabaseAccessPostgres::deleteFromTable($this, $tableName, $columnName, $columnValue);
    }
    // VERY POWERFUL FUNCTION, CALL WITH CARE! This will delete this eschool system from our system entirely
    // (like it never existed) This includes all moodle instances that are owned by this institution.
    public function deleteInstitutionFromSystemEntirely()
    {
        // delete each moodle instance owned by this institution
        foreach ($this->getEschools() as $eschool)
        {
            $eschool->deleteEschoolFromSystemEntirely();
        }
        // delete this institution's database schema
        GcrDatabaseAccessPostgres::deleteSchemaFromSystem($this);

        // delete moodledata directory for institution
        exec(escapeshellcmd('rm -R ' . gcr::moodledataDir . $this->short_name . '/'));

        // delete password salt history for this institution
        Doctrine_Query::create()
            ->delete('GcrInstitutionSaltHistory')
            ->where('institutionid = ?', $this->id)
            ->execute();
        Doctrine_Query::create()
    		->delete('GcrTrial t')
    		->where('t.organization_id = ?', $this->id)
    		->execute();
        GcrChainedPaymentTable::getInstance()->createQuery('c')
                ->delete()
                ->where('c.user_institution_id = ?', $this->short_name)
                ->execute();
        GcrChatSessionTable::getInstance()->createQuery('c')
                ->delete()
                ->where('c.eschool_id = ?', $this->short_name)
                ->execute();
        GcrChatSessionUsersTable::getInstance()->createQuery('c')
                ->delete()
                ->where('c.user_eschool_id = ?', $this->short_name)
                ->execute();
        GcrChatSessionInviteTable::getInstance()->createQuery('c')
                ->delete()
                ->where('c.user_eschool_id = ?', $this->short_name)
                ->orWhere('c.from_user_eschool_id = ?', $this->short_name)
                ->execute();
        GcrCommissionTable::getInstance()->createQuery('c')
                ->delete()
                ->where('c.institution_id = ?', $this->short_name)
                ->execute();
        GcrEclassroomTable::getInstance()->createQuery('e')
                ->delete()
                ->where('e.user_institution_id = ?', $this->short_name)
                ->execute();
        GcrEschoolMonthlyDataTable::getInstance()->createQuery('e')
                ->delete()
                ->where('e.eschool_id = ?', $this->short_name)
                ->execute();
        GcrUserMonthlyDataTable::getInstance()->createQuery('u')
                ->delete()
                ->where('u.user_institution_id = ?', $this->short_name)
                ->execute();
        GcrPayoffTable::getInstance()->createQuery('p')
                ->delete()
                ->where('p.user_eschool_id = ?', $this->short_name)
                ->execute();
        GcrPurchaseTable::deleteInstitutionRecords($this);
        GcrUserStorageS3Table::deleteBucket($this);        
        
        if ($address = $this->getAddressObject())
        {
            $address->delete();
        }
        if ($contact1 = $this->getPersonObject())
        {
            $contact1->delete();
        }
        if ($contact2 = $this->getPerson2Object())
        {
            $contact2->delete();
        }
        $this->delete();
    }
    public function deleteCacheDirectories()
    {
        $output = '';
        $command = 'rm -rf /opt/moodledata/globalclassroom4/' . $this->short_name . '/dwoo/*';
        system($command, $output);
        return ($output == 0);
    }
    public function gcQuery($sql, $params = array(), $returnOneRecord = false, $failSilently = false)
    {
        return GcrDatabaseAccessPostgres::gcQuery($this, $sql, $params, $returnOneRecord, $failSilently);
    }
    public function generateNewMhrInstitution($params = array())
    {
        // For some reason, mhr_institution requires an all lowercase alphabetic "name" column
        // fortunately, this column is only used as a primary key, so we can make it anything.
        // Why didn't they just use a normal auto inc integer?
        if (!isset($params['name']))
        {
            do
            {
                $params['name'] = GcrEschoolTable::generateAdminPassword(12,
                        'abcdfghjkmnpqrstvwxyz', false);
            }
            while ($this->selectFromMhrTable('institution', 'name', $params['name'], true));

        }
        return $this->insertIntoMhrTable('institution', $params);
    }
    public function getAccessIdleTimeout()
    {
        if (!$timeout = $this->getConfigVar('gc_access_idle_timeout'))
        {
            $timeout = 600; // default mahara setting found in web.php
        }
        return $timeout;
    }
    //The mahara Dwoo Templating system is annoying with creating new objects, so this is to get a View's access list.
    public function getAccessList($id)
    {
        $mhr_view_obj = $this->selectFromMhrTable('view', 'id', $id, true);
        $mhr_view = new GcrMhrView($mhr_view_obj, $this);
        return $mhr_view->getAccessList();
    }
    public function getAccountManager()
    {
        return $this->getOwnerUser()->getAccountManager();
    }
    public function getActiveTrial()
    {
        $trial = false;
        $trial_record = Doctrine::getTable('GcrTrial')->createQuery('t')
                ->where('t.organization_id = ?', $this->id)
                ->andWhere('t.end_date = ?', 0)
                ->orWhere('t.end_date > ?', time())
                ->andWhere('t.organization_id = ?', $this->id)
                ->orderBy('t.start_date DESC')
                ->fetchOne();
        if ($trial_record)
        {
            $trial = Doctrine::getTable('GcrTrial')->find($trial_record->id);
        }
        return $trial;
    }
    public function getAddressObject()
    {
        return Doctrine::getTable('GcrAddress')->find($this->address);
    }
    public function getAppType()
    {
        return Doctrine::getTable('GcrInstitutionType')->find($this->getInstitutionType());
    }
    public function getAppUrl($include_trailing_slash = true)
    {
        $url = 'https://' . $this->short_name . '.' . gcr::maharaDomain;
        if ($include_trailing_slash)
        {
            return $url . '/';
        }
        return $url;
    }
    public function getAuthInstanceForMhrInstitution($mhr_institution_name = false)
    {
        if (!$mhr_institution_name)
        {
            $mhr_institution_name = gcr::maharaInstitutionName;
        }
        $sql = 'select * from ' . $this->short_name . '.mhr_auth_instance where institution = ? and authname = ?';
        return $result = $this->gcQuery($sql, array($mhr_institution_name, 'internal'), true);
    }
    public function getAuthInstance($eschool)
    {
        $sql = 'select * from ' . $this->short_name . '.mhr_auth_instance_config where value = ? and field = ?';
        if ($result = $this->gcQuery($sql, array($eschool->getAppUrl(), 'wwwroot'), true))
        {
            return $this->selectFromMhrTable('auth_instance', 'id', $result->instance, true);
        }
        return false;
    }
    public function getAvailabilityStatuses($include_only_set_by_user = false)
    {
        $return_array = array();
        $statuses = $this->selectFromMhrTable('gcr_availability_status');
        if ($include_only_set_by_user)
        {
            foreach ($statuses as $status)
            {
                if ($status->short_name != 'offline')
                {
                    if ($status->short_name == 'available')
                    {
                        array_unshift($return_array, $status);
                    }
                    else
                    {
                        array_push($return_array, $status);
                    }
                }
            }
        }
        else
        {
            $return_array = $statuses;
        }
        return $return_array;
    }
    public function getBcryptCost()
    {
        $bcrypt_cost = $this->getConfigVar('bcrypt_cost');
        if (!$bcrypt_cost || !is_int($bcrypt_cost) || $bcrypt_cost < 4 || $bcrypt_cost > 31) 
        {
            $bcrypt_cost = 12;
        }
        return sprintf('%02d', $bcrypt_cost);
    }
    public function getConfigVar($var_name)
    {
        if($var = $this->selectFromMhrTable('config', 'field', $var_name, true))
        {
            return $var->value;
        }
        return false;
    }
    public function getConnection()
    {
        return GcrDatabaseAccessPostgres::getConnection();
    }
    public function getCourseCount()
    {
        $course_count = 0;
        if($eschools = $this->getEschools())
        {
            foreach ($eschools as $eschool)
            {
                $course_count += $eschool->getCourseCount();
            }
        }
        return $course_count;
    }
    public function getDatabaseTablePrefix()
    {
        return gcr::maharaPrefix;
    }
    public function getDefaultEschool($fail_silently = false)
    {
        $default_eschool = Doctrine::getTable('GcrEschool')->findOneByShortName($this->default_eschool_id);
        if ((!$default_eschool) && (!$fail_silently))
        {
            global $CFG;
            $CFG->current_app->gcError('Institution ' . $this->short_name . 
                    ' has an invalid default eschool id: ' . $this->default_eschool_id, 'gcdatabaseerror');
        }
        return $default_eschool;
    }
    public function getDefaultDashboardMhrView()
    {
        $sql = 'select * from ' . $this->short_name . '.mhr_view where title = ?';
        $templates = $this->gcQuery($sql, array(gcr::defaultDashboardTemplateTitle));
        if ($templates)
        {
            foreach ($templates as $template)
            {
                if ($template->institution == 'mahara')
                {
                    // We have located the default dashboard template
                    if ($template->description == '')
                    {
                        // This makes absolutely sure that our trigger for knowing if the user has
                        // a deafult Mahara dashboard works.
                        $description = 'This is a default dashboard template for new users.';
                        $this->updateMhrTable('view', array('description' => $description), 
                                                    array('id' => $template->id));
                        $template->description = $description;
                    }
                    return new GcrMhrView($template, $this);
                }
            }
        }
        return false;
    }
    public function getEclassroomEschools()
    {
        $eschools = array();
        foreach($this->getEschools() as $eschool)
        {
            if ($eschool->allowsEclassrooms())
            {
                $eschools[] = $eschool;
            }
        }
        if (count($eschools) > 0)
        {
            return $eschools;
        }
        return false;
    }
    public function getEclassrooms()
    {
        return Doctrine::getTable('GcrEclassroom')->findByUserInstitutionId($this->short_name);
    }
    public function getEclassroomUsers($eschool = false)
    {
        // Find list of all unique eclassroom users on this eschool
        $users = array();
        $eclassrooms = $this->getEclassrooms();
        foreach ($eclassrooms as $eclassroom)
        {
            if (!$eschool || $eclassroom->getEschoolId() == $eschool->getShortName())
            {
                $user_id = $eclassroom->getUserId();
                if (!array_key_exists($user_id, $users))
                {
                    $mhr_user_obj = $this->selectFromMhrTable('usr', 'id', $user_id, true);
                    if ($mhr_user_obj->deleted != 1)
                    {
                        $users[$user_id] = new GcrMhrUser($mhr_user_obj, $this);
                    }
                }
            }
        }
        return $users;
    }
    public function getEschoolFromAuthInstance($mhr_auth_instance)
    {
        $sql = 'select * from ' . $this->short_name . '.mhr_auth_instance_config where instance = ? and field = ?';
        $config = $this->gcQuery($sql, array($mhr_auth_instance->id, 'wwwroot'), true);
        if ($short_name = GcrEschoolTable::parseShortNameFromUrl($config->value))
        {
            if ($eschool = Doctrine::getTable('GcrEschool')->findOneByShortName($short_name))
            {
                return $eschool;
            }
        }
        return false;
    }
    public function getEschools()
    {
        $eschools = Doctrine::getTable('GcrEschool')->createQuery('e')
                ->where('e.organization_id = ?', $this->id)
                ->orderBy('e.full_name')
                ->execute();
        if (count($eschools) > 0)
        {
                return $eschools;
        }
        return false;
    }
    public function getGCAdminUser()
    {
        $mhr_user_obj = $this->selectFromMhrTable('usr', 'username', 'gc4' . $this->short_name . 'admin', true);
        return new GcrMhrUser($mhr_user_obj, $this);
    }
    public function getGcFeeMembership()
    {
        if ($gc_fee = $this->getConfigVar('gc_membership_fee_percent'))
        {
            return $gc_fee;
        }
        else
        {
            return 0;
        }
    }
    public function getHost($mhr_host)
    {
        if ($short_name = GcrEschoolTable::parseShortNameFromUrl($mhr_host->wwwroot))
        {
            if ($eschool = Doctrine::getTable('GcrEschool')->findOneByShortName($short_name))
            {
                return $eschool;
            }
        }
        return false;
    }
    public function getInstitution()
    {
        return $this;
    }
    public function getLastActivity()
    {
        $sql = 'select * from ' . $this->short_name . '.' . gcr::maharaPrefix .
                'usr where id > 1 order by lastaccess DESC';
        $mhr_usr_obj = $this->gcQuery($sql, array(), true);
        return $mhr_usr_obj->lastaccess;
    }
    public function getLogoFilePath()
    {
        return gcr::moodledataDir . $this->short_name . '/gc_images/' . $this->logo;
    }
    public function getManualPaymentEndDate()
    {
        $purchase = Doctrine::getTable('GcrPurchase')->createQuery('p')
            ->where('p.purchase_type_id = ?', $this->short_name)
            ->andWhere('p.purchase_type = ?', 'eschool_manual')
            ->orderBy('p.bill_cycle DESC')
            ->fetchOne();
        if ($purchase)
        {
            return $purchase->getBillCycle();
        }
        else
        {
            return 0;
        }
    }
    public function getMembershipTrialLength()
    {
        if ($config_var = $this->getConfigVar('gc_membership_trial_length'))
        {
            $length = $config_var;
        }
        else
        {
            $length = gcr::membershipTrialLengthInDays;
        }
        return $length;
    }
    public function getMhrHost($eschool)
    {
        return $this->selectFromMhrTable('host', 'wwwroot', $eschool->getAppUrl());
    }
    public function getMhrInstitution()
    {
        return $this->selectFromMhrTable('institution', 'name', gcr::maharaInstitutionName, true);
    }
    public function getMhrUserById($id)
    {
        return $this->selectFromMhrTable('usr', 'id', $id, true);
    }
    public function getMhrUserByEmail($email)
    {
        return $this->selectFromMhrTable('usr', 'email', $email, true);
    }
    public function getMhrUserByUsername($username)
    {
        return $this->selectFromMhrTable('usr', 'username', $username, true);
    }
    public function getMnetData()
    {
        $mnet_data = new stdClass();
        if (!$var = $this->getConfigVar('openssl_keypair'))
        {
            global $CFG;
            $CFG->current_app->gcError('Institution ' . $this->short_name .
                    ' has no openssl_keypair entry in mhr_config', 'gcdatabaseerror');
        }
        list($certificate, $keypair_PEM) = explode('@@@@@@@@', $var);
        $mnet_data->public_key  = $certificate;
        if (!$mnet_data->keypair_expires = $this->getConfigVar('openssl_keypair_expires'))
        {
            global $CFG;
            $CFG->current_app->gcError('Institution ' . $this->short_name .
                    ' has no openssl_keypair_expires entry in mhr_config', 'gcdatabaseerror');
        }
        if (!$mnet_data->name = $this->getConfigVar('sitename'))
        {
            global $CFG;
            $CFG->current_app->gcError('Institution ' . $this->short_name .
                    ' has no sitename entry in mhr_config', 'gcdatabaseerror');
        }
        // remove trailing / from mahara wwwroot
        $mnet_data->wwwroot = $this->getAppUrl(false);
        return $mnet_data;
    }
    public function getMnetCourses()
    {
        $eschools = array();
        foreach ($this->getMnetEschools() as $eschool)
        {
            $eschools[$eschool->getShortName()] = $eschool->selectFromMdlTable('course');
        }
        return $eschools;
    }
    public function getMnetEschools()
    {
        $eschools = array();
        foreach ($this->selectFromMhrTable('auth_instance', 'authname', 'xmlrpc') as $mhr_auth_instance)
        {
            if ($eschool = $this->getEschoolFromAuthInstance($mhr_auth_instance))
            {
                $eschools[] = $eschool;
            }
        }
        if (count($eschools) > 0)
        {
            return $eschools;
        }
        return null;
    }
    public function getNextActivationPaymentDate()
    {
        $manual_payment_ts = $this->getManualPaymentEndDate();
        if (!$purchase = $this->getPurchaseActivation())
        {
            if ($manual_payment_ts == 0)
            {
                return false;
            }
            else
            {
                return $manual_payment_ts;
            }
        }
        $paypal_records = Doctrine::getTable('GcrPaypal')->findByRecurringPaymentId($purchase->profile_id);
        if (count($paypal_records) == 0)
        {
            $next_payment_ts = $purchase->trans_time + 86400;
        }
        else
        {

            $most_recent_payment = null;
            foreach($paypal_records as $record)
            {
                if (!$most_recent_payment || $record->getPaymentDate() > $most_recent_payment->getPaymentDate())
                {
                    $most_recent_payment = $record;
                }
            }
            $next_payment_ts = GcrPurchaseTable::getNextBillingDate($most_recent_payment->getPaymentDate(), $purchase->bill_cycle);
        }
        if ($manual_payment_ts < $next_payment_ts)
        {
            return $next_payment_ts;
        }
        else
        {
            return $manual_payment_ts;
        }
    }
    public function getOwnerUser()
    {
        if ($mhr_user = $this->selectFromMhrTable('usr', 'id', $this->creator_id, true))
        {
            return new GcrMhrUser($mhr_user, $this);
        }
        else
        {
            global $CFG;
            $CFG->current_app->gcError('Warning: Institution ' . $this->short_name . ' has no owner user');
        }
        return false;
    }
    public function getPersonObject()
    {
        return Doctrine::getTable('GcrPerson')->find($this->contact1);
    }
    public function getPerson2Object()
    {
        return Doctrine::getTable('GcrPerson')->find($this->contact2);
    }
    public function getPurchaseActivation()
    {
        $purchase = Doctrine::getTable('GcrPurchase')->createQuery('p')
            ->where('p.purchase_type_eschool_id = ?', $this->short_name)
            ->andWhere('p.purchase_type = ?', 'eschool')
            ->fetchOne();
        return $purchase;
    }
    public function getPurchases($type = false, $start_ts = 0, $end_ts = null,
            $include_all_recurring = false, $include_manual = true)
    {
        $purchases = GcrPurchaseTable::getAppPurchases($this, $type, $start_ts, $end_ts,
                $include_all_recurring, $include_manual);
        $eschools = $this->getEschools();
        if ($eschools)
        {
            foreach($eschools as $eschool)
            {
                if ($eschool_purchases = GcrPurchaseTable::getAppPurchases($eschool, $type, 
                        $start_ts, $end_ts, $include_all_recurring, $include_manual))
                {
                    if ($purchases)
                    {
                        $purchases->merge($eschool_purchases);
                    }
                    else
                    {
                        $purchases = $eschool_purchases;
                    }
                }
            }
        }
        return $purchases;
    }
    public function getSupportUrl()
    {
        $support_url = $this->getConfigVar('gcrsupporturl');
        if (empty($support_url))
        {
            $support_url = gcr::defaultSupportUrl;
        }
        return $support_url;
    }
    public function getTableName()
    {
        return 'GcrInstitution';
    }
    public function getUrl()
    {
        return 'https://' . $this->short_name . '.' . gcr::domainName;
    }
    public function getUser($mdl_user)
    {
        if ($mhr_user = $this->selectFromMhrTable('usr', 'username', $mdl_user->getObject()->username, true))
        {
            return new GcrMhrUser($mhr_user, $this);
        }
    }
    public function getUserById($id)
    {
        if ($mhr_user_obj = $this->getMhrUserById($id))
        {
            return new GcrMhrUser($mhr_user_obj, $this);
        }
        return false;
    }
    public function getUserCount()
    {
        return $this->countMhrTableRecords('usr') - 1;
    }
    public function getUsers($include_admin = false, $include_deleted = false)
    {
        $min_user_id = 0;
        $filters = array();
        if (!$include_admin)
        {
            $min_user_id = 1;      
        }
        $filters[] = new GcrDatabaseQueryFilter('id', '>', $min_user_id);
        if (!$include_deleted)
        {
            $filters[] = new GcrDatabaseQueryFilter('deleted', '<', 1);
        }
        $q = new GcrDatabaseQuery($this, 'usr', 'select * from', $filters);
        return $q->executeQuery();
    }
    public function hasMnetConnection(GcrEschool $eschool)
    {
        $id = $eschool->getId();
        foreach ($this->getMnetEschools() as $mnet_eschool)
        {
            if ($mnet_eschool->getId() == $id)
            {
                return true;
            }
        }
        return false;
    }
    public function insertIntoMhrTable($tableName, $valueArray = array())
    {
        return GcrDatabaseAccessPostgres::insertIntoTable($this, $tableName, $valueArray);
    }
    public function isCreated()
    {
        return GcrDatabaseAccessPostgres::schemaExists($this);
    }
    public function isInternal()
    {
        return $this->is_internal;
    }
    public function isMembershipAllowed($billing_cycle)
    {
        $billing_cycle = strtolower($billing_cycle);
        if ($this->getConfigVar('gc_membership_cost_' . $billing_cycle))
        {
            return true;
        }
        return false;
    }
    public function isMoodle()
    {
        return false;
    }
    public function isMahara()
    {
        return true;
    }
    public function isHome()
    {
        return ($this->short_name == gcr::gchomeSchemaMahara);
    }
    public function isTemplate()
    {
        if (Doctrine::getTable('GcrInstitutionType')->findOneByTemplate($this->short_name))
        {
            return true;
        }
        return false;
    }
    public function isPrimaryTemplate()
    {
        return ($this->short_name == gcr::gcPrimaryMaharaTemplate);
    }
    public function removeMnetConnection($eschool)
    {
        if ($mhr_auth_instance = $this->getAuthInstance($eschool))
        {
            $this->deleteFromMhrTable('auth_instance_config', 'instance', $mhr_auth_instance->id);
            $this->deleteFromMhrTable('auth_instance', 'id', $mhr_auth_instance->id);
        }
        $this->deleteFromMhrTable('host', 'wwwroot', $eschool->getAppUrl());
    }
    public function selectFromMhrTable($tableName, $columnName = false, $columnValue = false, $returnOne = false, $orderBy = false)
    {
        return GcrDatabaseAccessPostgres::selectFromTable($this, $tableName, $columnName, $columnValue, $returnOne, $orderBy);
    }
    public function setAppTitle($title)
    {
        $this->setConfigVar('sitename', $title);
    }
    public function setConfigVar($var_name, $var_value)
    {
        if ($this->selectFromMhrTable('config', 'field', $var_name))
        {
            $this->updateMhrTable('config', array('value' => $var_value), array('field' => $var_name));
        }
        else
        {
            $this->insertIntoMhrTable('config', array('field' => $var_name, 'value' => $var_value));
        }
    }
    
    public function setMnetConnection($eschool)
    {
        if ($mhr_host = $this->selectFromMhrTable('host', 'wwwroot', $eschool->getAppUrl(), true))
        {
            $mdl_mnet_host = $eschool->getSelfMdlMnetHostRecord();
            $mhr_auth_instance = $this->getAuthInstance($eschool);
            $this->updateMhrTable('auth_instance_config', array('value' => $mdl_mnet_host->wwwroot),
                    array('instance' => $mhr_auth_instance->id, 'field' => 'wwwroot'));
            $params = array('wwwroot' => $mdl_mnet_host->wwwroot,
                            'name' => $eschool->getFullName(),
                            'ipaddress' => $mdl_mnet_host->ip_address,
                            'publickey' => $mdl_mnet_host->public_key,
                            'publickeyexpires' => $mdl_mnet_host->public_key_expires);
            $this->updateMhrTable('host', $params, array('wwwroot' => $mhr_host->wwwroot));
        }
        else
        {
            $this->createMnetConnection($eschool);
        }
    }
    // This function returns a URL which can be used to auto-login as the gcadmin Administrator
    public function setupAdminAutoLogin()
    {
        $token = GcrInstitutionTable::generateAutoLoginRecord($this->short_name, 'gc4' .
                $this->short_name . 'admin', $this->admin_password);
        return $this->getAppUrl() . '?token=' . $token;
    }
    public function setupAutoLogin($username, $password, $expire = null)
    {
        $token = GcrInstitutionTable::generateAutoLoginRecord($this->short_name, $username, $password, $expire);
        return $this->getAppUrl() . '?token=' . $token;
    }
    public function updateEschoolMnetConnections()
    {
        foreach ($this->getMnetEschools() as $eschool)
        {
            $eschool->setMnetConnection($this);
        }
    }
    public function updateMhrTable($tableName, $valueAssocArray, $whereAssocArray)
    {
        $this->beginTransaction();
        // We need this to get past Mahara's triggers which are not schema aware.
        $this->gcQuery('SET LOCAL search_path TO ' . $this->short_name);
        $result = GcrDatabaseAccessPostgres::updateTable($this, $tableName, $valueAssocArray, $whereAssocArray);
        $this->commitTransaction();
        return $result;
    }
    public function upsertIntoMhrTable($tableName, $valueAssocArray, $whereAssocArray)
    {
        return GcrDatabaseAccessPostgres::upsertIntoTable($this, $tableName, $valueAssocArray, $whereAssocArray);
    }
}