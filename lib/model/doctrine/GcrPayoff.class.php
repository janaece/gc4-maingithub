<?php

/**
 * Payoff
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    globalclassroom
 * @subpackage model
 * @author     Justin England
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class GcrPayoff extends BaseGcrPayoff
{
    public function createPurchaseRecord($description, $trans_time, $reference_id)
    {
        $purchase = new GcrPurchase();
        $purchase->setTransTime(time());
        $purchase->setUserId($this->user_id);
        $purchase->setAmount($this->amount);
        $purchase->setPurchaseType('payoff');
        $purchase->setPurchaseTypeId($this->id);
        $purchase->setPurchaseTypeEschoolId($this->eschool_id);
        $purchase->setUserInstitutionId($this->user_eschool_id);
        $purchase->setPurchaseTypeDescription($description);
        $purchase->setTransTime($trans_time);
        $purchase->setProfileId($reference_id);
        $purchase->save();
        $this->purchase_id = $purchase->getId();
        $this->save();
        return $purchase;
    }
    public function doPaypalMassPayment()
    {
        $paypal = new prestaPaypal(gcr::rootDir . 'plugins/prestaPaypalPlugin/sdk/lib');
        $credentials = $this->getCredentials();
        GcrPaypalTable::initializePaypalCaller($paypal, gcr::paypalSandbox);
        $paypal->setTransactionTotal($this->amount);

        //check balance on account first
        $balance = $paypal->getBalance();
        if (($balance - $this->amount) < gcr::paypalMinimumBalance)
        {
            global $CFG;
            $CFG->current_app->gcError('Balance on Paypal Account too low to process payoff ID ' .
                    $this->id, 'paypalbalancetoolow');
        }
        $paypal->setBillingEmail($credentials->getUserPaypalEmail());
        if (!$paypal->doMassPayment())
        {
            global $CFG;
            $CFG->current_app->gcError('Payoff ID ' . $this->id . ' MassPay Failed: ' .
                    $paypal->getErrorString(), 'paypalmasspayfailed');
        }
        $purchase = $this->createPurchaseRecord('Account Withdrawal Via PayPal', time(), 'MassPayment');
        $this->payoff_status = 'completed';
        $this->purchase_id = $purchase->getId();
        $this->save();
    }
    public function getAddressObject()
    {
        return Doctrine::getTable('GcrAddress')->find($this->address);
    }
    public function getCredentials()
    {
        return Doctrine::getTable('GcrPayoffCredentials')->find($this->credentials_id);
    }
    public function getDescription()
    {
        switch ($this->payoff_type)
        {
            case 'eschool_manual':
                    return 'Check payment to eSchool ' . $this->getEschool()->getFullName();
            case 'classroom_manual':
                    $mhr_user_obj = $this->getUser()->getObject();
                    return 'Check payment to eClassroom ' . $mhr_user_obj->firstname .
                            ' ' . $mhr_user_obj->lastname;
        }
        return false;
    }
    public function getInstitution()
    {
        return GcrInstitutionTable::getInstitution($this->eschool_id);
    }
    public function getPayoffTypeString()
    {
        switch ($this->payoff_type)
        {
            case 'eschool':
                    return 'eSchool PayPal';
            case 'classroom':
                    return 'eClassroom PayPal';
            case 'eschool_manual':
                    return 'eSchool Manual';
            case 'classroom_manual':
                    return 'eClassroom Manual';
        }
    }
    public function getPurchase()
    {
        if ($this->purchase_id > 0)
        {
            return Doctrine::getTable('GcrPurchase')->find($this->purchase_id);
        }
        else
        {
            return false;
        }
    }
    public function getRecipientString()
    {
        $credentials = $this->getCredentials();
        if ($credentials->getUserBusinessName() != '')
        {
            return $credentials->getUserBusinessName();
        }
        return $credentials->getFullName();
    }
    public function getUser()
    {
        $institution = $this->getUserInstitution();
        if (!$user = $institution->getUserById($this->user_id))
        {
            global $CFG;
            $CFG->current_app->gcError('Payoff ' . $this->id . ' has invalid user_id ' .
                    $this->user_id, 'gcdatabaseerror');
        }
        return $user;
    }
    public function getUserInstitution()
    {
        return GcrInstitutionTable::getInstitution($this->user_eschool_id);
    }
    public function isEschoolPayoff()
    {
        return ($this->payoff_type == 'eschool' || $this->payoff_type == 'eschool_manual');
    }
    public function isManualCheckPayment()
    {
        return ($this->address != 0);
    }
    public function isManual()
    {
        return ($this->payoff_type == 'eschool_manual' || $this->payoff_type == 'classroom_manual');
    }
    public function isPending()
    {
        return ($this->payoff_status == 'pending');
    }
}